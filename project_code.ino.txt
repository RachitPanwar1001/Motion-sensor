// Defines pins numbers
const int trigPin = 9;
const int echoPin = 10;
const int buzzer = 11;
const int ledPin1 = 13;
const int ledPin2 = 12;
const int ledPin3 = 8;

// Defines variables
long duration;
int distance;
int safetyDistance;

// Function declarations
void turnOnLEDs(int pin1, int pin2 = -1, int pin3 = -1);
void turnOffLEDs(int pin1, int pin2 = -1, int pin3 = -1);
void playSound(int soundType);

void setup() {
  // Configures pin modes
  pinMode(trigPin, OUTPUT);  // Sets the trigPin as an Output
  pinMode(echoPin, INPUT);   // Sets the echoPin as an Input
  pinMode(buzzer, OUTPUT);   // Sets the buzzer pin as an Output
  pinMode(ledPin1, OUTPUT);  // Sets the ledPin1 as an Output
  pinMode(ledPin2, OUTPUT);  // Sets the ledPin2 as an Output
  pinMode(ledPin3, OUTPUT);  // Sets the ledPin3 as an Output

  // Initializes serial communication
  Serial.begin(9600);
}

void loop() {
  // Clears the trigPin
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);

  // Sets the trigPin on HIGH state for 10 microseconds
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  // Reads the echoPin, returns the sound wave travel time in microseconds
  duration = pulseIn(echoPin, HIGH);

  // Calculating the distance in centimeters
  distance = duration * 0.034 / 2;

  // Assigns the distance to the safetyDistance variable
  safetyDistance = distance;

  // Control LEDs and buzzer based on distance ranges
  if (safetyDistance < 8) {
    // Less than 5 cm: All three LEDs on, produce sound 1
    turnOnLEDs(ledPin1, ledPin2, ledPin3);
    playSound(1);
  } else if (safetyDistance >= 8 && safetyDistance <= 12) {
    // Between 5 and 15 cm: LED 1 and LED 2 on, produce sound 2
    turnOnLEDs(ledPin1, ledPin2);
    turnOffLEDs(ledPin3);  // Turn off LED 3
    playSound(2);
  } else if (safetyDistance > 12 && safetyDistance <= 20) {
    // Greater than 15 cm: Only LED 1 on, produce sound 3
    turnOnLEDs(ledPin1);
    turnOffLEDs(ledPin2, ledPin3);  // Turn off LED 2 and LED 3
    playSound(3);
  } else {
    // Distance greater than 20: Turn off all LEDs
    turnOffLEDs(ledPin1, ledPin2, ledPin3);
    playSound(4);
  }

  // Prints the distance on the Serial Monitor
  Serial.print("Distance: ");
  Serial.println(distance);
}

// Function to turn on LEDs
void turnOnLEDs(int pin1, int pin2, int pin3) {
  digitalWrite(pin1, HIGH);
  digitalWrite(pin2, HIGH);
  digitalWrite(pin3, HIGH);
}

// Function to turn off LEDs
void turnOffLEDs(int pin1, int pin2, int pin3) {
  digitalWrite(pin1, LOW);
  digitalWrite(pin2, LOW);
  digitalWrite(pin3, LOW);
}

// Function to play different sounds
void playSound(int soundType) {
  int frequency;
  int duration;

  // Determine sound parameters based on the soundType
  switch (soundType) {
    case 1:  // Sound 1
      frequency = 5000;
      duration = 25;
      break;
    case 2:  // Sound 2
      frequency = 900;
      duration = 300;
      break;
    case 3:  // Sound 3
      frequency = 300;
      duration = 1000;
      break;
    default:
      frequency = 1000;
      duration = 0;
      break;
  }

  // Play the tone
  if(safetyDistance<=20){
    tone(buzzer, frequency, duration);
  }
  delay(duration + 50);  // Add a small delay to separate tones
  delay(50);
  noTone(buzzer);        // Stop the tone
}